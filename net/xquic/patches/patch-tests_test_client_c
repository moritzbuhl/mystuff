Index: tests/test_client.c
--- tests/test_client.c.orig
+++ tests/test_client.c
@@ -1,10 +1,11 @@
 /**
  * @copyright Copyright (c) 2022, Alibaba Group Holding Limited
  */
+#include <sys/stat.h>
 
 #define _GNU_SOURCE
 #include <stdio.h>
-#include <event2/event.h>
+#include <event.h>
 #include <memory.h>
 #include <errno.h>
 #include <signal.h>
@@ -32,6 +33,30 @@
 #include "getopt.h"
 #endif
 
+#include <netinet/in.h>
+
+struct event *
+event_new(struct event_base *eb, int fd, short events,
+	void (*callback)(int, short, void *), void *arg)
+{
+    struct event * ev;
+
+    if ((ev = malloc(sizeof(struct event))) == NULL)
+        return NULL;
+
+    event_set(ev, fd, events, callback, arg);
+    event_base_set(eb, ev);
+
+    return ev;
+}
+
+void
+event_free(struct event *ev)
+{
+    event_del(ev);
+    free(ev);
+}
+
 extern long xqc_random(void);
 extern xqc_usec_t xqc_now();
 
@@ -1378,7 +1403,7 @@ xqc_client_bind_to_interface(int fd, const char *inter
     struct ifreq ifr;
     memset(&ifr, 0x00, sizeof(ifr));
     strncpy(ifr.ifr_name, interface_name, sizeof(ifr.ifr_name) - 1);
-#if !defined(__APPLE__)
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
     printf("fd: %d. bind to nic: %s\n", fd, interface_name);
     if (setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, (char *)&ifr, sizeof(ifr)) < 0) {
         printf("bind to nic error: %d, try use sudo\n", errno);
@@ -1427,7 +1452,7 @@ xqc_client_create_socket(int type, 
         goto err;
     }
 
-#if !defined(__APPLE__)
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
     int val = IP_PMTUDISC_DO;
     setsockopt(fd, IPPROTO_IP, IP_MTU_DISCOVER, &val, sizeof(val));
 #endif
